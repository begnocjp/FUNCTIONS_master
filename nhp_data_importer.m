%% Import data from text file.
% Script for importing data from the following text file:
%
%    E:\NHPcondA.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/08/22 10:00:35

%% Initialize variables.
filename = 'E:\NHPcondA.csv';
delimiter = ',';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5,6,7,8,9,10]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using date
% format string.
try
    dates{1} = datetime(dataArray{1}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{1} = cellfun(@(x) x(2:end-1), dataArray{1}, 'UniformOutput', false);
        dates{1} = datetime(dataArray{1}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
    catch
        dates{1} = repmat(datetime([NaN NaN NaN]), size(dataArray{1}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{1});
anyInvalidDates = isnan(dates{1}.Hour) - anyBlankDates;
dates = dates(:,1);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,3,4,5,6,7,8,9,10]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
times = dates{:, 1}; % TimeStamp 
activity = cell2mat(rawNumericColumns(:, 1)); % ActivitySum
sigstrength = cell2mat(rawNumericColumns(:, 2)); % SignalStrength
delta = cell2mat(rawNumericColumns(:, 3)); % Delta 0.5-4 Hz
theta = cell2mat(rawNumericColumns(:, 4)); % Theta 4-8 Hz
alpha = cell2mat(rawNumericColumns(:, 5)); % Alpha 8-12 Hz
sigma = cell2mat(rawNumericColumns(:, 6)); % Sigma 12-16 Hz
beta = cell2mat(rawNumericColumns(:, 7)); % Beta 16-24 Hz
logamma = cell2mat(rawNumericColumns(:, 8)); %LoGamma 30-50 Hz
higamma = cell2mat(rawNumericColumns(:, 9)); %HiGamma 51-100 Hz


% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% TimeStamp=datenum(TimeStamp);


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns R;

%% Create Analysis and plotting variables

freqnum = [1,2,3,4,5,6,7];
freqbands = [delta';theta';alpha';sigma';beta';logamma';higamma'];
freqlabels = {'DELTA','THETA','ALPHA','SIGMA','BETA','LOGAMMA','HIGAMMA'};

time1 = datestr(times);
timechar = time1(:,13:20);
timechar = timechar';

time = 1:8640;

figure();set(gcf,'Position',[0 0 1920 1080],'Color',[1 1 1]);
contourf(time(1:8640),freqnum(1:7),freqbands(1:7,1:8640), 'linecolor','none'); caxis([0 50]); %,'DatetimeTickFormat','HH:mm:ss');
hold on;
xlabel('Time','FontSize',18);ylabel('Frequency Band','FontSize',18);
set(gca,'FontSize',18);title(['Relative power' clusternames{cluster_i} ' ' blocknames{block_i}]);axis square;


for freq_i = 1:length(freqlabels)
    
    subplot
    
    
end
    
    
    
    
