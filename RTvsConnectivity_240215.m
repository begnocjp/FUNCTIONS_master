clear all;close all;clc;warning off;
names = {'DCR104' 'DCR107' 'DCR110' 'DCR111' 'DCR112' 'DCR115' 'DCR118' 'DCR119'...
     'DCR122' 'DCR124' 'DCR125' 'DCR202' 'DCR203' 'DCR206' 'DCR208' 'DCR209'...
     'DCR213' 'DCR214' 'DCR217' 'DCR220' 'DCR221' 'DCR223'...
     'DCR204' 'DCR207' 'DCR210' 'DCR211' 'DCR212'  'DCR215' 'DCR218' 'DCR219' 'DCR222'...
     'DCR224' 'DCR225' 'DCR102' 'DCR103'  'DCR106' 'DCR108' 'DCR109' 'DCR113' 'DCR114' ...
     'DCR117' 'DCR120' 'DCR121' 'DCR123'  ... 
     'S1' 'S6B' 'S8' 'S11B' 'S15B' 'S16B' 'S18' 'S21' 'S25B' 'S29B'...
     'S31B' 'S36' 'S39' 'S40'...
     'S1B' 'S6' 'S8B' 'S11' 'S15' 'S16' 'S18B' 'S21B' 'S25' 'S29' 'S31' ...
     'S36B' 'S39B' 'S40B'...
     'S4' 'S5B' 'S7B' 'S10' 'S12' 'S14' 'S17' 'S22B' 'S23B' 'S27' 'S28B' 'S30'...
     'S4B' 'S5' 'S7' 'S10B' 'S12B' 'S14B' 'S17B' 'S22' 'S23' 'S27B'...
     'S28' 'S30B'}; %artefact rejection list
groups        = {{names{1:22}},{names{23:44}},{names{45:58}},{names{59:72}},{names{73:84}},{names{85:96}}};
conditions = {'dirleft','dirright','nondirleft','nondirright'};
frequencies = {'delta','theta','loweralpha','upperalpha','beta'};
times = {};starttime = -500:100:2500;endtime   = starttime+200;
for time_i = 1:length(starttime)
    times{time_i} = strcat(num2str(starttime(time_i)),'to',num2str(endtime(time_i)));
end
GROUPS = {'YOUNG_ACT','YOUNG_SHAM','DOM_ACT','DOM_SHAM','NONDOM_ACT','NONDOM_SHAM'};
CWD   = 'E:\fieldtrip'; IMAG ='\IMAGCOH_OUTPUT';
addpath(genpath('F:\fieldtrip\FUNCTIONS\mass_uni_toolbox')); %for FDR correction
addpath('F:\fieldtrip\FUNCTIONS'); addpath([CWD,IMAG]);
IMAVALS = zeros(length(names),length(conditions),length(frequencies),length(times));
count = -length(groups{1})+1;
for group_i = 1:length(groups)
    load(['E:\fieldtrip\ANALYSES\CONNECTIVITY_MATRICES\ALLDATA_' GROUPS{group_i}]);
    fprintf('\n');        
    count = count+length(groups{group_i});
    for name_i = 1:size(ALLDATA.conditions.dirleft.delta,1);
        fprintf('.');
        for cond_i = 1:length(conditions)
            for freq_i = 1:length(frequencies)
                for time_i = 1:length(times)
                    IMAVALS((name_i+count-1),cond_i,freq_i,time_i) = mean(squeeze(mean(ALLDATA.conditions.(conditions{cond_i}).(frequencies{freq_i})(name_i,time_i,:,:))));
                end
            end
        end
    end
end
%% load behavioural data in
%% Import data from text file.
% Script for importing data from the following text file:
%
%    F:\fieldtrip\ANALYSES\CONNECTIVITY_MATRICES\NI_CuedGoNoGoData.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2015/02/24 08:07:25

% Initialize variables.
filename = 'F:\fieldtrip\ANALYSES\CONNECTIVITY_MATRICES\NI_CuedGoNoGoData.txt';
delimiter = '\t';
startRow = 2;
endRow = 97;

% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

% Open the text file.
fileID = fopen(filename,'r');

% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow-startRow+1, 'Delimiter', delimiter, 'HeaderLines', startRow-1, 'ReturnOnError', false);

% Close the text file.
fclose(fileID);

% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = [dataArray{:,1:end-1}];
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37]);
rawCellColumns = raw(:, [19,31]);


% Allocate imported array to column variable names
Subject = cell2mat(rawNumericColumns(:, 1));
nondirleftNtrials = cell2mat(rawNumericColumns(:, 2));
nondirleftNcorrect = cell2mat(rawNumericColumns(:, 3));
nondirleftNError = cell2mat(rawNumericColumns(:, 4));
nondirleftNinvalid = cell2mat(rawNumericColumns(:, 5));
nondirleftACC = cell2mat(rawNumericColumns(:, 6));
nondirleftRT = cell2mat(rawNumericColumns(:, 7));
nondirrightNtrials = cell2mat(rawNumericColumns(:, 8));
nondirrightNcorrect = cell2mat(rawNumericColumns(:, 9));
nondirrightNError = cell2mat(rawNumericColumns(:, 10));
nondirrightNinvalid = cell2mat(rawNumericColumns(:, 11));
nondirrightACC = cell2mat(rawNumericColumns(:, 12));
nondirrightRT = cell2mat(rawNumericColumns(:, 13));
leftnogoNtrials = cell2mat(rawNumericColumns(:, 14));
leftnogoNcorrect = cell2mat(rawNumericColumns(:, 15));
leftnogoNError = cell2mat(rawNumericColumns(:, 16));
leftnogoNinvalid = cell2mat(rawNumericColumns(:, 17));
leftnogoACC = cell2mat(rawNumericColumns(:, 18));
leftnogoRT = rawCellColumns(:, 1);
leftgoNtrials = cell2mat(rawNumericColumns(:, 19));
leftgoNcorrect = cell2mat(rawNumericColumns(:, 20));
leftgoNError = cell2mat(rawNumericColumns(:, 21));
leftgoNinvalid = cell2mat(rawNumericColumns(:, 22));
leftgoACC = cell2mat(rawNumericColumns(:, 23));
leftgoRT = cell2mat(rawNumericColumns(:, 24));
rightnogoNtrials = cell2mat(rawNumericColumns(:, 25));
rightnogoNcorrect = cell2mat(rawNumericColumns(:, 26));
rightnogoNError = cell2mat(rawNumericColumns(:, 27));
rightnogoNinvalid = cell2mat(rawNumericColumns(:, 28));
rightnogoACC = cell2mat(rawNumericColumns(:, 29));
rightnogoRT = rawCellColumns(:, 2);
rightgoNtrials = cell2mat(rawNumericColumns(:, 30));
rightgoNcorrect = cell2mat(rawNumericColumns(:, 31));
rightgoNError = cell2mat(rawNumericColumns(:, 32));
rightgoNinvalid = cell2mat(rawNumericColumns(:, 33));
rightgoACC = cell2mat(rawNumericColumns(:, 34));
rightgoRT = cell2mat(rawNumericColumns(:, 35));

% Clear temporary variables
clearvars filename delimiter startRow endRow formatSpec fileID dataArray ans raw numericData col rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns;
%% 
% stitch variaibles of interest together i.e., RT
close all;
RT = [leftgoRT rightgoRT nondirleftRT nondirrightRT];
rvals = zeros(length(groups),length(conditions),length(frequencies),length(times));
pvals = zeros(size(rvals));
count = -length(groups{1})+1;
for group_i = 1:length(groups)
    fprintf('\n');
    count = count+length(groups{group_i});
    for time_i = 1:length(times)   
        fprintf('.');
        for cond_i = 1:length(conditions)
            x = RT(count:count+length(groups{group_i})-1,cond_i);
            for freq_i = 1:length(frequencies)
                y = squeeze(IMAVALS(count:count+length(groups{group_i})-1,cond_i,freq_i,time_i));
                [RHO,PVAL] = corr([x,y]);
                rvals(group_i,cond_i,freq_i,time_i) = RHO(1,2);
                pvals(group_i,cond_i,freq_i,time_i) = PVAL(1,2);
            end
        end
    end
end
%%
count = 0;
for group_i = 1:length(groups)
    fprintf('.')
    for time_i =1:length(times)
        count =count+1;
        subplot(length(groups),length(times),count);imagesc(squeeze(pvals(group_i,:,:,time_i)),[0 0.05]);hold on;
    end
end
%% 
clc;
for group_i = 1:length(groups)
    fprintf('\n%s%',GROUPS{group_i});
    for cond_i = 1:length(conditions)
        fprintf('%\n\ts',conditions{cond_i});
        for freq_i = 1:length(frequencies)
            fprintf('\n\t\t\t%s',frequencies{freq_i});
            for time_i =1:length(times)
                if pvals(group_i,cond_i,freq_i,time_i) < 0.05;
                    fprintf('\t%s\t%s',times{time_i},num2str(squeeze(pvals(group_i,cond_i,freq_i,time_i))));
                end
            end
        end
    end
end
