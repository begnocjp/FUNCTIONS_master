%% Import data from text file.
% Script for importing data from the following text file:
%
%    E:\NHP Study\8140_Veh_VU595_NHP Parietal EEG Relative Power.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/10/31 12:13:45

%% Initialize variables.
% filename = 'E:\NHP Study\8140_Veh_VU595_NHP Parietal EEG Relative Power.csv';
delimiter = ',';
startRow = 3;

CWD = 'E:\NHP Study\';
% names = {'8140_Veh_VU595_NHP Parietal EEG Relative Power'};
names = {'8112_3mpk Donepezil_NHP Parietal EEG Relative Power','8112_5.6mpk Donepezil_NHP Parietal EEG Relative Power',...
'8112 _10mpk Donepezil_NHP Parietal EEG Relative Power','8112_BL1_NHP Parietal EEG Relative Power',...
'8112_BL2_NHP Parietal EEG Relative Power','8112_BL3_NHP Parietal EEG Relative Power',...
'8140__3mpk_VU595_NHP Parietal EEG Relative Power','8140__10mpk_VU595_NHP Parietal EEG Relative Power'...
'8140__30mpk_VU595_NHP Parietal EEG Relative Power'};

for name_i = 1%:length(names)
    name = names{name_i};
    filename = [CWD name '.csv'];
    
    %% Read columns of data as strings:
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';
    
    %% Open the text file.
    fileID = fopen(filename,'r');
    
    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);
    
    
    %% Close the text file.
    fclose(fileID);
    
    %% Convert the contents of columns containing numeric strings to numbers.
    % Replace non-numeric strings with NaN.
    raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
    for col=1:length(dataArray)-1
        raw(1:length(dataArray{col}),col) = dataArray{col};
    end
    numericData = NaN(size(dataArray{1},1),size(dataArray,2));
    
    for col=[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105]
        % Converts strings in the input cell array to numbers. Replaced non-numeric
        % strings with NaN.
        rawData = dataArray{col};
        for row=1:size(rawData, 1);
            % Create a regular expression to detect and remove non-numeric prefixes and
            % suffixes.
            regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
            try
                result = regexp(rawData{row}, regexstr, 'names');
                numbers = result.numbers;
                
                % Detected commas in non-thousand locations.
                invalidThousandsSeparator = false;
                if any(numbers==',');
                    thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                    if isempty(regexp(thousandsRegExp, ',', 'once'));
                        numbers = 0;
                        invalidThousandsSeparator = true;
                    end
                end
                % Convert numeric strings to numbers.
                if ~invalidThousandsSeparator;
                    numbers = textscan(strrep(numbers, ',', ''), '%f');
                    numericData(row, col) = numbers{1};
                    raw{row, col} = numbers{1};
                end
            catch me
            end
        end
    end
    
    try
        dates{1} = datetime(dataArray{1}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
    catch
        try
            % Handle dates surrounded by quotes
            dataArray{1} = cellfun(@(x) x(2:end-1), dataArray{1}, 'UniformOutput', false);
            dates{1} = datetime(dataArray{1}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
        catch
            dates{1} = repmat(datetime([NaN NaN NaN]), size(dataArray{1}));
        end
    end
    
    anyBlankDates = cellfun(@isempty, dataArray{1});
    anyInvalidDates = isnan(dates{1}.Hour) - anyBlankDates;
    
    % Create non-numeric struct variables
    Power = [];
    Power.date = dates(:,1);
    Power.alertness = raw(:,2);
    Power.activity = raw(:,3);
    Power.signalstrength = dataArray{:, 4};
    %% Replace non-numeric cells with NaN
    altertness = raw(:,2);
    R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
    raw(R) = {0}; % Replace non-numeric cells
    
    %% Create output variables
    Power1 = cell2mat(raw);
    Power.evoked = Power1(:,5:105);
    
    save([CWD name '.mat'],'Power');
    
    % times = cell2mat(raw(:,1));
    % freqnums = [1:100];
    % delta = cell2mat(raw(:,5:8));
    % theta = cell2mat(raw(:,9:12));
    % alpha = cell2mat(raw(:,13:16));
    % sigma = cell2mat(raw(:,17:20));
    % beta = cell2mat(raw (:,21:34));
    % logamma = cell2mat(raw(:,35:54));
    % higamma = cell2mat(raw(:,55:105));
    
    %% Clear temporary variables
    clearvars Power1 name filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R anyBlankDates anyInvalidDates;
    
end

%% Create Analysis and plotting variables
% Next Func
% freqnum = {[:,5:8],[:,9:12],[13:16],[17:20],[21,34],[35:54],[55:105]};
% freqbands = [delta';theta';alpha';sigma';beta';logamma';higamma'];
% freqlabels = {'DELTA','THETA','ALPHA','SIGMA','BETA','LOGAMMA','HIGAMMA'};
%
% time1 = datestr(times);
% timechar = time1(:,13:20);
% timechar = timechar';
%
% time = [1:8294];
%
% figure();set(gcf,'Position',[0 0 1920 1080],'Color',[1 1 1]);
% contourf(time(1:8294),freqnums(1:length([1:97])),Veh(1:97,1:8294), 'linecolor','none'); caxis([0 5]); %,'DatetimeTickFormat','HH:mm:ss');
% hold on;
% xlabel('Time','FontSize',18);ylabel('Frequency Band','FontSize',18);
% set(gca,'FontSize',18);title(['Relative power' clusternames{cluster_i} ' ' blocknames{block_i}]);axis square;
